import ee from 'events';
import { ItemDocument } from '../models/item';
import { ActionType, BreaksMessage, DamageType } from './Constuructors/types';
import { weaponTypes } from './MiscService';

export type ExpArr = readonly [name: string, exp: number, heal?: number];

export type SuccessArgs = {
  expArr?: ExpArr[];
  exp: number;
  hp?: number;
  dmg?: number;
  initiator: string;
  target: string;
  action: string;
  dmgType?: DamageType;
  actionType?: ActionType;
  weapon?: ItemDocument;
  effect?: string[];
  msg?: (data: SuccessArgs) => string;
};

type FailArgs = SuccessArgs & {
  message: BreaksMessage;
}

/**
 * msg
 * @todo WIP, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ —Ç.–ø —Ç–∞–∫ –∏
 * —É–º–µ—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å i18n
 * —Å–µ–π—á–∞—Å (–µ) –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Ç–∏–ø Error
 * –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ BattleLog –≤—ã–±—Ä–æ—Å, –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ –≤–≤–µ—Ä—Ö
 * @return {String} ({type:String,message:String})
 */
function csl(msgObj) {
  const {
    action, message, target, initiator, expArr, weapon,
  } = msgObj;

  const expString = expArr ? expArr.map(([name, exp]) => `${name}: üìñ${exp}`).join(', ') : '';

  const TEXT: Record<BreaksMessage, Record<'en' | 'ru', string>> = {
    NO_MANA: {
      ru: `–ù–µ —Ö–≤–∞—Ç–∏–ª–æ –º–∞–Ω—ã –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è _${action}_`,
      en: '',
    },
    NO_ENERGY: {
      ru: `–ù–µ —Ö–≤–∞—Ç–∏–ª–æ —ç–Ω–µ—Ä–≥–∏ –¥–ª—è —É–º–µ–Ω–∏—è _${action}_`,
      en: '',
    },
    SILENCED: {
      ru: `*${initiator}* –ø—ã—Ç–∞–ª—Å—è —Å–æ—Ç–≤–æ—Ä–∏—Ç—å _${action}_, –Ω–æ –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å (–±–µ–∑–º–æ–ª–≤–∏–µ)`,
      en: '',
    },
    CHANCE_FAIL: {
      ru: `*${initiator}* –ø—ã—Ç–∞–ª—Å—è —Å–æ—Ç–≤–æ—Ä–∏—Ç—å _${action}_, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ`,
      en: '',
    },
    GOD_FAIL: {
      ru: `–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ _${action}_ *${initiator}* –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å –ø–æ –≤–æ–ª–µ –±–æ–≥–æ–≤ `,
      en: '',
    },
    HEAL_FAIL: {
      ru: `*${initiator}* –ø—ã—Ç–∞–ª—Å—è _–≤—ã–ª–µ—á–∏—Ç—å_ *${target}*, –Ω–æ —Ç–æ—Ç –±—ã–ª –∞—Ç–∞–∫–æ–≤–∞–Ω`,
      en: '',
    },
    SKILL_FAIL: {
      ru: `*${initiator}* –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–µ–Ω–∏–µ _${action}_, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ`,
      en: '',
    },
    NO_WEAPON: {
      ru: `*${initiator}* –ø—ã—Ç–∞–ª—Å—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å *${target}*, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –æ—Ä—É–∂–∏—è –≤ —Ä—É–∫–∞—Ö`,
      en: '',
    },
    DEF: {
      ru: `*${initiator}* –∞—Ç–∞–∫–æ–≤–∞–ª *${target}* _${weapon ? weapon.case : ''}_, –Ω–æ —Ç–æ—Ç —Å–º–æ–≥ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è \\[${expString}]`,
      en: '',
    },
    DODGED: {
      ru: `*${initiator}* –∞—Ç–∞–∫–æ–≤–∞–ª *${target}* _${weapon ? weapon.case : ''}_, –Ω–æ —Ç–æ—Ç —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏`,
      en: '',
    },
    ECLIPSE: {
      ru: `*${initiator}* –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞—Ç–∞–∫–æ–≤–∞–ª *${target}* –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É–≤–∏–¥–µ–ª –≤–æ —Ç—å–º–µ`,
      en: '',
    },
    PARALYSED: {
      ru: `*${initiator}* –ø–æ–ø—ã—Ç–∞–ª—Å—è –∞—Ç–∞–∫–æ–≤–∞–ª –Ω–æ –±—ã–ª –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω üóø`,
      en: '',
    },
  };
  const text = TEXT[message] || {
    ru: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –º–∞–≥–∏–∏',
  };
  // @todo —Å–µ–π—á–∞—Å battleLog –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–∏–ø—ã –º–∞–≥–∏–π, –∏
  // –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–ø–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
  return text.ru;
}

/**
 * –ö–ª–∞—Å—Å –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ battlelog
 * @todo WIP –∫–ª–∞—Å—Å –≤ —Å—Ç–∞–¥–∏–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
 * @see https://trello.com/c/qxnIM1Yq/17
 */
export default class BattleLog extends ee {
  /**
   * –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –≤ console log
   * @param {Object.<string, string>} msgObj —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  log(msgObj: FailArgs): void {
    const data = csl(msgObj);
    this.write(data);
  }

  /**
   * –£–¥–∞—á–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ action
   * @param {Object.<string, any>} msgObj —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  success(msgObj: SuccessArgs): void {
    let data = '';
    const { expArr } = msgObj;
    const expString = expArr ? expArr.map(([name, exp, val]) => `${name}: üíñ${val} üìñ${exp}`).join(', ') : '';
    // –ï—Å–ª–∏ –æ–±—å–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏—Å–ø–ª—å–∑—É–µ–º –µ—ë
    if (msgObj.msg) {
      data = msgObj.msg(msgObj);
    } else if (msgObj.dmgType && msgObj.dmgType === 'physical' && msgObj.weapon) {
      const { action } = weaponTypes[msgObj.weapon.wtype];
      data = `*${msgObj.initiator}* ${action(msgObj.target, msgObj.weapon)} –∏ –Ω–∞–Ω—ë—Å *${msgObj.dmg}* —É—Ä–æ–Ω–∞ \\[ üíî-${msgObj.dmg}/${msgObj.hp} üìñ${msgObj.exp} ]`;
    } else if (msgObj.dmgType) {
      data = `*${msgObj.initiator}* —Å–æ—Ç–≤–æ—Ä–∏–ª _${msgObj.action}_ –Ω–∞ *${msgObj.target}* –Ω–∞–Ω–µ—Å—è ${msgObj.dmg}  \\[ üíî-${msgObj.dmg}/${msgObj.hp} üìñ${msgObj.exp} ]`;
    } else if (!msgObj.effect) {
      data = `*${msgObj.initiator}* –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª _${msgObj.action}_ –Ω–∞ *${msgObj.target}* \\[ üìñ${msgObj.exp} ]`;
    } else {
      data = `*${msgObj.initiator}* –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ _${msgObj.action}_ –Ω–∞ *${msgObj.target}* —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º ${msgObj.effect} \\[ üìñ${msgObj.exp} ]`;
    }
    // –í—ã–Ω–æ—à—É –≤–Ω–∏–∑ —Ç.–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å action
    if (msgObj.action === 'handsHeal') {
      data = `–ò–≥—Ä–æ–∫ *${msgObj.target}* –±—ã–ª –≤—ã–ª–µ—á–µ–Ω ü§≤ –Ω–∞ *${msgObj.effect}* \\[ ${expString} ]`;
    }
    this.write(data);
  }

  /**
   * –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Game
   * @param data –æ–±—å–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  write(data: string): void {
    this.emit('BattleLog', data);
  }
}
