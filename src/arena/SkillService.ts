import type Char from './CharacterService';
import LearnError from './errors/LearnError';
import * as skills from './skills';

export type SkillsNames = keyof typeof skills;

export default class SkillService {
  static skills = skills;

  static async learn(char: Char, skillId: SkillsNames): Promise<Char> {
    const skill = SkillService.skills[skillId];
    const charSkillLvl = char.skills[skillId] ?? 0;
    if (skill.lvl > char.lvl) {
      throw new LearnError('–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è —É–º–µ–Ω–∏—è');
    }
    if (skill.bonusCost[charSkillLvl] > char.bonus) {
      throw new LearnError('–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–æ–Ω—É—Å–æ–≤');
    }
    if (charSkillLvl + 1 > skill.bonusCost.length) {
      throw new LearnError(`–£–º–µ–Ω–∏–µ ${skill.displayName} –∏–º–µ–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`);
    }
    char.bonus -= skill.bonusCost[charSkillLvl];
    await char.learnSkill(skillId, charSkillLvl + 1);
    return char;
  }

  static skillDescription(skillId: SkillsNames, char: Char): string {
    const {
      displayName, desc, lvl, bonusCost,
    } = SkillService.skills[skillId];
    const charSkillLvl = char.skills[skillId] ?? 0;

    return `${displayName} (${charSkillLvl === 0 ? '–ù–µ –∏–∑—É—á–µ–Ω–æ' : charSkillLvl})

${desc} ${char.lvl < lvl ? '\n\n‚ùóÔ∏è–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ —É—Ä–æ–≤–Ω—è —É–º–µ–Ω–∏—è' : ''}

${charSkillLvl >= bonusCost.length ? '–ò–∑—É—á–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–º–µ–Ω–∏—è'
    : `–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è: ${bonusCost[charSkillLvl]}üí° (${char.bonus}üí°) ${bonusCost[charSkillLvl] > char.bonus ? '‚ùóÔ∏è' : '‚úÖ'}`
}`;
  }
}
