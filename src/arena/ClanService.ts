const { Markup } = require('telegraf');
const channerHelper = require('../helpers/channelHelper');
const db = require('../helpers/dataBase');
const { ClanModel } = require('../models/clan');
const CharacterService = require('./CharacterService');
const arena = require('./index');

/**
 * Clan Service
 *
 * @description –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–Ω–∞–º–∏.
 * @module Service/Clan
 */

module.exports = {
  async getClanById(id) {
    if (arena.clans[id]) {
      return arena.clans[id];
    }
    const clan = await db.clan.findOne({ _id: id });
    arena.clans[clan.id] = clan;
    return clan;
  },
  /**
   * @param {string} clanId - id –∫–ª–∞–Ω–∞
   * @param {string} charId - id –ø–æ—Ä—Å–æ–Ω–∞–∂–∞
   */
  async handleRequest(charId, clanId) {
    const char = arena.characters[charId];
    const clan = await this.getClanById(clanId);
    const requestClan = await this.getPlayerClanRequest(charId);

    const remainingTime = (date) => ((date.valueOf() - Date.now()) / 60000).toFixed();

    const penaltyForRequest = char.getPenaltyDate('clan_request');
    if (penaltyForRequest) {
      throw new Error(`–û–ø—Ä–µ–¥–µ–ª–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ ${remainingTime(penaltyForRequest)} –º–∏–Ω.`);
    }
    const penaltyForLeave = char.getPenaltyDate('clan_leave');
    if (penaltyForLeave) {
      throw new Error(`–í—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–æ–≤—ã–π –∫–ª–∞–Ω —Ç—ã —Å–º–æ–∂–µ—à—å —á–µ—Ä–µ–∑ ${remainingTime(penaltyForLeave)} –º–∏–Ω.`);
    }

    if (clan.requests.some((p) => p.tgId === char.tgId)) {
      await this.removeRequest(clan.id, char.id);
      throw new Error('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }

    if (requestClan) {
      throw new Error('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞—è–≤–∫—É');
    }

    if (clan.hasEmptySlot) {
      await this.createRequest(clan.id, char.id);
      throw new Error('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    } else {
      throw new Error('–ö–ª–∞–Ω —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
    }
  },
  /**
  * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–Ω, –≤ –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–æ–∫ –¥–µ–ª–∞–ª –∑–∞—è–≤–∫—É
  * @param {string} charId - id –ø–æ—Ä—Å–æ–Ω–∞–∂–∞
  */
  async getPlayerClanRequest(charId) {
    const clan = await db.clan.findOne({ requests: charId });
    return clan;
  },
  /**
   * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∫–ª–∞–Ω
   * @param {string} charId - id —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–ª–∞–Ω–∞
   * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞
   */
  async createClan(charId, name) {
    const char = arena.characters[charId];
    if (char.gold < ClanModel.lvlCost()[0]) {
      throw new Error('–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞');
    }
    char.gold -= ClanModel.lvlCost()[0];
    const clan = await db.clan.create(char.id, name);
    return char.joinClan(clan);
  },
  /**
   * –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–Ω —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ
   * @param {string} clanId
   */
  async removeClan(clanId) {
    const clan = await this.getClanById(clanId);
    clan.players.forEach((player) => {
      const char = arena.characters[player.id];
      if (char) {
        char.leaveClan();
      }
    });
    return db.clan.remove(clan.id);
  },
  /**
   * –í–æ–∑–≤—Ä–∞–∑–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ –∏–∑ –±–¥
   * @returns {Promise<import ('telegraf/typings/markup').CallbackButton[][]>}
   */
  async getClanList(charId) {
    const char = arena.characters[charId];
    const clans = await db.clan.list();
    const requestClan = await this.getPlayerClanRequest(char.id) || {};
    return clans.map((clan) => [
      Markup.button.callback(
        `${clan.name} (üë•${clan.players.length} / ${clan.maxPlayers})`,
        `info_${clan.id}`,
      ),
      Markup.button.callback(
        `${clan.id === requestClan.id ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–í—Å—Ç—É–ø–∏—Ç—å'}`,
        `request_${clan.id}`,
      ),
    ]);
  },
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–æ–ª–æ—Ç–æ –≤ –∫–ª–∞–Ω –∏ –∑–∞–±–∏—Ä–∞–µ—Ç —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {string} clanId
   * @param {string} charId - id –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   * @param {number} gold - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞
   */
  async addGold(clanId, charId, gold) {
    const clan = await this.getClanById(clanId);
    const char = arena.characters[charId];
    if (char.gold < gold) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞');
    }
    char.gold -= gold;
    await char.saveToDb();
    const updated = await db.clan.update(clan.id, { gold: clan.gold + gold });
    Object.assign(clan, updated);
  },
  /**
   * –°–æ–∑–¥–∞—ë—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω
   * @param {string} clanId
   * @param {string} charId
   */
  async createRequest(clanId, charId) {
    const clan = await this.getClanById(clanId);
    const updated = await db.clan.update(clanId, { requests: clan.requests.concat(charId) });
    Object.assign(clan, updated);
  },
  /**
   * –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–º
   * @param {string} clanId
   * @param {string} charId
   */
  async removeRequest(clanId, charId) {
    const char = arena.characters[charId];
    const clan = await this.getClanById(clanId);
    const updated = await db.clan.update(clanId, {
      requests: clan.requests.filter((p) => p.tgId !== char.tgId),
    });
    await char.updatePenalty('clan_request', 60);
    Object.assign(clan, updated);
  },
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∫–ª–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
   * @param {string} clanId
   * @param {number} tgId
   */
  async acceptRequest(clanId, tgId) {
    const clan = await this.getClanById(clanId);
    if (clan.hasEmptySlot) {
      const char = await CharacterService.getCharacter(tgId);
      const updated = await db.clan.update(clan.id, {
        players: [...clan.players, char.id],
        requests: clan.requests.filter((player) => player.tgId !== char.tgId),
      });
      Object.assign(clan, updated);

      /** @todo –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–ª–∞–Ω —É –∏–≥—Ä–æ–∫–∞ */
      arena.characters[char.id] = await char.joinClan(clan);
      channerHelper.broadcast(
        `–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω *${clan.name}* –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞`,
        char.tgId,
      );
    } else {
      throw new Error('–ö–ª–∞–Ω —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω');
    }
  },
  /**
   * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞
   * @param {string} clanId
   * @param {number} tgId
   */
  async rejectRequest(clanId, tgId) {
    const clan = await this.getClanById(clanId);
    const char = await CharacterService.getCharacter(tgId);
    const updated = await db.clan.update(clan.id, {
      requests: clan.requests.filter((player) => player.tgId !== char.tgId),
    });
    Object.assign(clan, updated);
    channerHelper.broadcast(
      `–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω *${clan.name}* –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`,
      char.tgId,
    );
  },
  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞
   * @param {string} clanId
   * @param {number} tgId
   */
  async leaveClan(clanId, tgId) {
    const clan = await this.getClanById(clanId);
    const char = await CharacterService.getCharacter(tgId);
    const updated = await db.clan.update(clan.id, {
      players: clan.players.filter((player) => player.tgId !== char.tgId),
    });
    Object.assign(clan, updated);
    await char.leaveClan();
    return char;
  },
};
