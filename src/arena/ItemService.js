const _ = require('lodash');
const { damageType } = require('../utils/icons');
const { mono } = require('./MiscService');
const arena = require('./index');
/**
 * Items Service
 *
 * @description –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—â–∞–º–∏.
 * @module Service/Item
 */

const attrNames = {
  name: '–ù–∞–∑–≤–∞–Ω–∏–µ',
  atc: '–ê—Ç–∞–∫–∞',
  prt: '–ó–∞—â–∏—Ç–∞',
  price: '–¶–µ–Ω–∞',
  race: '–†–∞—Å–∞',
  weight: '–í–µ—Å',
  hark: {
    str: '–°–∏–ª–∞',
    dex: '–õ–æ–≤–∫–æ—Å—Ç—å',
    wis: '–ú—É–¥—Ä–æ—Å—Ç—å',
    int: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    con: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
  },
  plushark: {
    str: '–°–∏–ª–∞',
    dex: '–õ–æ–≤–∫–æ—Å—Ç—å',
    wis: '–ú—É–¥—Ä–æ—Å—Ç—å',
    int: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    con: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ',
  },
  mga: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞',
  mgp: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞',
  hl: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è',
  r_fire: damageType.fire(' –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–≥–Ω—è'),
  r_acid: damageType.acid(' –ó–∞—â–∏—Ç–∞ –æ—Ç —è–¥–∞'),
  r_lighting: damageType.lighting(' –ó–∞—â–∏—Ç–∞ –æ—Ç –º–æ–ª–Ω–∏–∏'),
  r_frost: damageType.frost(' –ó–∞—â–∏—Ç–∞ –æ—Ç —Ö–æ–ª–æ–¥–∞'),
  r_physical: '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞',
  descr: '–û–ø–∏—Å–∞–Ω–∏–µ',
  add_hp: '–ó–¥–æ—Ä–æ–≤—å–µ',
  add_mp: '–ú–∞–Ω–∞',
  add_en: '–≠–Ω–µ—Ä–≥–∏—è',
  reg_hp: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
  reg_en: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
  reg_mp: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã',
  hp_drain: '–ü–æ—Ö–∏—â–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è',
  mp_drain: '–ü–æ—Ö–∏—â–µ–Ω–∏–µ –º–∞–Ω—ã',
  en_drain: '–ü–æ—Ö–∏—â–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
  type: '–¢–∏–ø',
  hit: '–£–¥–∞—Ä',
  edinahp: '',
  eff: '',
  '2handed': '–î–≤—É—Ä—É—á–Ω–æ–µ',
  fire: damageType.fire(' –£—Ä–æ–Ω –æ–≥–Ω—ë–º'),
  acid: damageType.acid(' –£—Ä–æ–Ω —è–¥–æ–º'),
  lighting: damageType.lighting(' –£—Ä–æ–Ω –º–æ–ª–Ω–∏–µ–π'),
  frost: damageType.frost(' –£—Ä–æ–Ω —Ö–æ–ª–æ–¥–æ–º'),
};

const getRequiredHark = (char, value, hark) => {
  const name = attrNames.hark[hark];
  const pointToPutOn = char.harks[hark] - value;
  const canPutOn = pointToPutOn <= 0;
  return `\t\t${canPutOn ? '‚ùóÔ∏è' : '‚úÖ'} ${name}: ${value} ${canPutOn ? `(${pointToPutOn})` : ''}`;
};

/**
 * @param {number | null} value
 * @param {string} key
 */
const getPlusHark = (value, key) => {
  if (!_.isNull(value) && value > 0) {
    return `\t\t‚ûï ${attrNames.hark[key]}: ${value}`;
  }
  return '';
};

const getAdditionalDamage = (item) => {
  const elementMessage = (key) => {
    const value = item[key];
    if (value) {
      if (typeof value === 'object') {
        return `\t\t‚ûï ${attrNames[key]}: ${value.min}-${value.max}`;
      }
      return `\t\t‚ûï ${attrNames[key]}: ${value}`;
    }
    return '';
  };

  return [
    'fire',
    'acid',
    'lighting',
    'frost',

    'r_fire',
    'r_acid',
    'r_lighting',
    'r_frost',
    'r_physical',

    'add_hp',
    'add_mp',
    'add_en',

    'reg_hp',
    'reg_en',
    'reg_mp',

    'hp_drain',
    'mp_drain',
    'en_drain',
  ].map(elementMessage).filter((x) => x).join('\n');
};

module.exports = {
  attrNames,
  /**
   * @param {String} nick
   * @param {Number} itemCode ID –∏—Ç–µ–º–∞
   * @return {Boolean}
   *
   */
  // eslint-disable-next-line consistent-return
  harkCheck(nick, itemCode) {
    // —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –ª–∏ —á–∞—Ä –ø–æ —Ö–∞—Ä–∫–∞–º
    // –ø—Ä–æ–≤–µ—Ä–∫—É —à–º–æ—Ç–∫–∏ –∏–ª–∏ –Ω–µ—Ç
    const char = arena.players[nick];
    const item = arena.shop[itemCode];
    if ((char) && (item)) {
      // eslint-disable-next-line no-restricted-syntax
      for (const i in char.hrks) {
        if (char.hrks[i] < item.hark[i]) {
          return false;
        }
      }
      return true;
    }
  },

  /**
   *
   * @param {import('./CharacterService')} char
   * @param {import('../models/item').Item} item
   */
  itemDescription(char, item) {
    return [
      `${item.name} ${item.price ? `(üí∞ ${item.price})` : ''}`,
      item.descr && `\n${item.descr}\n`,
      item.atc && mono(`\t\tüó° –ê—Ç–∞–∫–∞: ${item.atc}`),
      item.hit && mono(`\t\t‚öîÔ∏è –£–¥–∞—Ä: ${item.hit.min}-${item.hit.max}`),
      item.prt && mono(`\t\tüõ° –ó–∞—â–∏—Ç–∞: ${item.prt}`),

      item.hark && `\nüë§ –¢—Ä–µ–±—É–µ–º—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n${mono(
        _.map(item.hark, (val, key) => getRequiredHark(char, val, key)).join('\n'),
      )}`,

      item.plushark && `\n‚ÜóÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n${mono(
        _.map(item.plushark, getPlusHark).filter((x) => x).join('\n'),
      )}`,

      mono(`${getAdditionalDamage(item)}`),

      item.weight && `\n–í–µ—Å: ${item.weight} –∫–≥`,
    ]
      .filter((currentItem) => currentItem)
      .join('\n');
  },
};
