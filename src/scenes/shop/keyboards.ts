import _ from 'lodash';
import { Markup } from 'telegraf';
import type { Convenience } from 'telegraf/types';
import arena from '../../arena';
import type Char from '../../arena/CharacterService';
import { stores } from '../../arena/MiscService';
import { Collections, Profs } from '../../data';
import type { Item } from '../../models/item';

const storeKeys = Object.keys(stores);

const itemToButton = (item: Item) => [Markup.button.callback(
  `${item.name} (üí∞ ${item.price})`,
  `itemInfo_${item.code}`,
)];

/**
 * –í–æ–∑–≤—Ä–∞—â–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –≤–µ—â–µ–π –∏–∑ stores
 */
const getTypeButtons = () => storeKeys.map((type) => [Markup.button.callback(
  `${stores[type]}`,
  `itemType_${type}`,
)]);

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É.
 * –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂—É –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
 * @param wear - —Ç–∏–ø –≤–µ—â–µ–π (–∫—É–¥–∞ –Ω–∞–¥–µ–≤–∞–µ—Ç—Å—è)
 * @param prof - –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 */
const getItems = (wear: string, prof: Profs.Prof) => {
  const items: Item[] = _.filter(
    arena.items,
    (item: Item) => item.wear === wear && item.race.includes(prof) && !item.onlymake && !item.hide,
  );
  const buttons = items
    .sort((a, b) => b.price - a.price)
    .map(itemToButton);
  buttons.push([Markup.button.callback(
    '–ù–∞–∑–∞–¥',
    'back',
  )]);
  return buttons;
};

export const enter = (): Convenience.ExtraEditMessageText => Markup.inlineKeyboard([
  ...getTypeButtons(),
  [Markup.button.callback('–ö–æ–ª–ª–µ–∫—Ü–∏–∏', 'collectionList')],
]);

export const itemType = (
  type: string, char: Char,
): Convenience.ExtraEditMessageText => Markup.inlineKeyboard(
  getItems(type, char.prof),
);

export const itemInfo = (code: string):Convenience.ExtraEditMessageText => ({
  ...Markup.inlineKeyboard([
    [
      Markup.button.callback(
        '–ö—É–ø–∏—Ç—å',
        `buy_${code}`,
      ),
      Markup.button.callback(
        '–ù–∞–∑–∞–¥',
        `itemType_${arena.items[code].wear}`,
      ),
    ],
  ]),
  parse_mode: 'Markdown',
});

export const buy = (code: string): Convenience.ExtraEditMessageText => Markup.inlineKeyboard([
  [Markup.button.callback(
    '–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
    'inventory',
  )],
  [Markup.button.callback(
    '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏',
    `itemType_${arena.items[code].wear}`,
  )],
]);

export const collectionList = (): Convenience.ExtraEditMessageText => {
  const keys = Object.keys(Collections.collectionsData);
  const buttons = keys.map((key) => [
    Markup.button.callback(Collections.collectionsData[key].name, `collection_${key}`),
  ]);

  return Markup.inlineKeyboard(
    buttons,
  );
};

export const collectionItem = (key: string): Convenience.ExtraEditMessageText => {
  const items = _.filter(arena.items, (item: Item) => item.wcomb.includes(key));
  const buttons = items.map(itemToButton);
  return Markup.inlineKeyboard([
    ...buttons,
    [Markup.button.callback('–ù–∞–∑–∞–¥', 'collectionList')],
  ]);
};
