import type { Magic } from '@/arena/Constuructors/MagicConstructor';
import { bold } from '@/utils/formatString';
import { getDamageTypeIcon } from '@/utils/icons';

const getOrderType = (magic: Magic) => {
  switch (magic.orderType) {
    case 'all':
    case 'any':
      return '–ù–∞ –ª—é–±–æ–≥–æ';
    case 'enemy':
      return '–ù–∞ –≤—Ä–∞–≥–∞';
    case 'self':
      return '–ù–∞ —Å–µ–±—è';
    case 'team':
      return '–ù–∞ –∫–æ–º–∞–Ω–¥—É';
    case 'teamExceptSelf':
      return '–ù–∞ –∫–æ–º–∞–Ω–¥—É (–∫—Ä–æ–º–µ —Å–µ–±—è)';
    default:
      return magic.orderType;
  }
};

const getAoeType = (magic: Magic) => {
  switch (magic.aoeType) {
    case 'target':
      return '—ç—Ñ—Ñ–µ–∫—Ç –ø–æ –æ–¥–Ω–æ–π —Ü–µ–ª–∏';
    case 'targetAoe':
      return '—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—é—â–∏–π—Å—è —ç—Ñ—Ñ–µ–∫—Ç';
    case 'team':
      return '–º–∞—Å—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç';
    default:
      return magic.actionType;
  }
};

const getType = (magic: Magic) => {
  switch (magic.magType) {
    case 'bad':
      return '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è';
    case 'good':
      return '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è';
    default:
      return magic.magType;
  }
};

export const getMagicDescription = (magic: Magic, currentLvl?: number) => {
  return `
${bold(magic.displayName)}
${magic.desc}

–ö—Ä—É–≥ –º–∞–≥–∏–∏: ${magic.lvl}
–°—Ç–æ–∏–º–æ—Å—Ç—å: ${magic.costType === 'mp' ? 'üíß' : 'üîã'}${magic.cost}
–ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç: ${magic.baseExp}
–¢–∏–ø: ${getType(magic)}
–¢–∏–ø –∑–∞–∫–∞–∑–∞: ${getOrderType(magic)}, ${getAoeType(magic)}
–®–∞–Ω—Å: ${magic.chance.map((chance, i) => (i + 1 === currentLvl ? bold(chance) : chance)).join('/')}
–≠—Ñ—Ñ–µ–∫—Ç: ${magic.effect.map((effect, i) => (i + 1 === currentLvl ? bold(effect) : effect)).join('/')}
–¢–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞: ${getDamageTypeIcon(magic.effectType) || '‚ùé'}
–î–ª–∏—Ç–µ–ª—å–Ω–∞—è: ${magic.isLong ? '‚úÖ' : '‚ùé'}
`;
};
