import { Scenes, Markup } from 'telegraf';
import type CharacterService from '@/arena/CharacterService';
import MagicService from '@/arena/MagicService';
import type { BotContext } from '@/fwo';
import { getMagicDescription } from './utils';

export const magicScene = new Scenes.BaseScene<BotContext>('magics');

const getMagicButtons = (character: CharacterService) => {
  const knownMagics = MagicService.getMagicListByIds(Object.keys(character.magics));
  return knownMagics.map((magic) => [Markup.button.callback(
    `${magic.displayName}: ${character.magics[magic.name]}`,
    `about_${magic.name}`,
  )]);
};

const getMagicLvlButtons = (character: CharacterService) => {
  const maxMagicLvl = Math.min(character.lvl, 5, character.bonus);
  return new Array<number>(maxMagicLvl).fill(0).map((_, i) => {
    const lvl = i + 1;
    const magics = MagicService.getMagicListByProf(character.prof, lvl);
    const knownMagics = magics.filter((magic) => character.magics[magic.name]);
    const learntMagics = knownMagics.filter((magic) => {
      return character.magics[magic.name] === MagicService.MAX_MAGIC_LVL;
    });

    return [
      Markup.button.callback(`–ö—Ä—É–≥ ${lvl} ‚úîÔ∏è${knownMagics.length}/${magics.length} üåü${learntMagics.length}`, `learn_${lvl}`),
    ];
  });
};

magicScene.enter(async (ctx) => {
  ctx.session.character.exp = 99999;
  await ctx.session.character.saveToDb();
  await ctx.replyWithMarkdown(
    '*–ú–∞–≥–∏–∏*',
    Markup.keyboard([
      ['üîô –í –ª–æ–±–±–∏'],
    ]).resize(),
  );

  await ctx.replyWithMarkdown(
    '–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–≥–∏–∏. –ù–∞–∂–º–∏ –Ω–∞ –º–∞–≥–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –±–æ–ª—å—à–µ',
    Markup.inlineKeyboard([
      ...getMagicButtons(ctx.session.character),
      [
        Markup.button.callback('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞–≥–∏–∏', 'favorite'),
      ],
      [
        Markup.button.callback('–£—á–∏—Ç—å', 'selectLvl'),
        Markup.button.callback('–í –ø—Ä–æ—Ñ–∏–ª—å', 'back'),
      ],
    ]),
  );
});

magicScene.action(/favorite$|favorite_add(?=_)|favorite_remove_\d/, async (ctx) => {
  const [, action, index, magicName] = ctx.match.input.split('_');

  if (action === 'add') {
    ctx.session.character.favoriteMagicList[Number(index)] = magicName;
    await ctx.session.character.saveToDb();
  }

  if (action === 'remove') {
    ctx.session.character.favoriteMagicList.splice(Number(index), 1);
    await ctx.session.character.saveToDb();
  }

  const favorites = MagicService.getMagicListByIds(ctx.session.character.favoriteMagicList);

  await ctx.editMessageText(
    '–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –º–∞–≥–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –±–æ—é',
    Markup.inlineKeyboard(
      [
        ...favorites.map((magic, i) => [
          Markup.button.callback(magic.displayName || '+', `favorite_select_${i}`),
          Markup.button.callback('-', `favorite_remove_${i}`),
        ]),
        [
          Markup.button.callback('+', `favorite_select_${favorites.length}`, favorites.length >= 5),
        ],
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'magics')],
      ],
    ),
  );
});

magicScene.action(/favorite_select_\d/, async (ctx) => {
  const { magics, favoriteMagicList } = ctx.session.character;
  const [, , index] = ctx.match.input.split('_');

  const favoriteMagicSet = new Set(favoriteMagicList);
  const availableMagicIds = Object.keys(magics).filter((magic) => !favoriteMagicSet.has(magic));
  const availableMagicList = MagicService.getMagicListByIds(availableMagicIds);

  await ctx.editMessageText(
    availableMagicList.length ? '–í—ã–±–µ—Ä–∏ –º–∞–≥–∏—é' : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞',
    Markup.inlineKeyboard([
      ...availableMagicList.map((magic) => [Markup.button.callback(magic.displayName, `favorite_add_${index}_${magic.name}`)]),
      [Markup.button.callback('–ù–∞–∑–∞–¥', 'favorite')],
    ]),
  );
});

/** –û–∂–∏–¥–∞–µ–º "learn_${lvl}", –≥–¥–µ lvl - —É—Ä–æ–≤–µ–Ω—å –∏–∑—É—á–∞–µ–º–æ–π –º–∞–≥–∏–∏ */
magicScene.action('magics', async (ctx) => {
  await ctx.editMessageText(
    '–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–≥–∏–∏. –ù–∞–∂–º–∏ –Ω–∞ –º–∞–≥–∏—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –±–æ–ª—å—à–µ',
    Markup.inlineKeyboard([
      ...getMagicButtons(ctx.session.character),
      [
        Markup.button.callback('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞–≥–∏–∏', 'favorite'),
      ],
      [
        Markup.button.callback('–£—á–∏—Ç—å', 'selectLvl'),
        Markup.button.callback('–í –ø—Ä–æ—Ñ–∏–ª—å', 'back'),
      ],
    ]),
  );
});

magicScene.action(/selectLvl|learn(?=_)/, async (ctx) => {
  const [, magicLvl] = ctx.match.input.split('_');
  const oldBonus = ctx.session.character.bonus;

  if (magicLvl) {
    try {
      const newMagic = await MagicService.learnMagic(ctx.session.character, Number(magicLvl));
      await ctx.answerCbQuery(`–ò–∑—É—á–µ–Ω–∞ –º–∞–≥–∏—è ${newMagic.displayName} –¥–æ —É—Ä–æ–≤–Ω—è ${ctx.session.character.magics[newMagic.name]}`);
    } catch (e) {
      await ctx.answerCbQuery(e.message);
    }
  }

  const newBonus = ctx.session.character.bonus;

  if (!magicLvl || oldBonus !== newBonus) {
    await ctx.editMessageText(
      `–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑—É—á–∞–µ–º–æ–π –º–∞–≥–∏–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è —Ä–∞–≤–Ω–∞ —É—Ä–æ–≤–Ω—é –º–∞–≥–∏–∏ (*${ctx.session.character.bonus}üí°*)`,
      {
        ...Markup.inlineKeyboard([
          ...getMagicLvlButtons(ctx.session.character),
          [
            Markup.button.callback('–ù–∞–∑–∞–¥', 'magics'),
          ],
        ]),
        parse_mode: 'Markdown',
      },
    );
  }
});

/** –û–∂–∏–¥–∞–µ–º "about_${name}", –≥–¥–µ name - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∏–∏ */
magicScene.action(/(?<=about_)\w+/, async (ctx) => {
  const [magicName] = ctx.match;
  const magic = MagicService.getMagicById(magicName);
  const currentLvl = ctx.session.character.magics[magicName];

  await ctx.editMessageText(
    getMagicDescription(magic, currentLvl),
    {
      ...Markup.inlineKeyboard([
        Markup.button.callback('–ù–∞–∑–∞–¥', 'magics'),
      ]),
      parse_mode: 'Markdown',
    },
  );
});

magicScene.action('back', async (ctx) => {
  await ctx.scene.enter('profile');
});

magicScene.hears('üîô –í –ª–æ–±–±–∏', async (ctx) => {
  await ctx.scene.enter('lobby');
});
