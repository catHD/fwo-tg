const Scene = require('telegraf/scenes/base');
const Markup = require('telegraf/markup');
const db = require('../helpers/dataBase');

const createClanScene = new Scene('createClan');

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞
 * @param {string} name
 */
async function valid(name) {
  const trimName = name.trim();
  if (trimName.length > 16) {
    throw new Error('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ');
  } else if (trimName.length < 3) {
    throw new Error('–ù–∞–ø—Ä—è–≥–∏—Å—å, –µ—â—ë –ø–∞—Ä—É —Å–∏–º–≤–æ–ª–æ–≤!');
  } else if (trimName.charAt(0) === '/') {
    throw new Error('–ó–∞–ø—Ä–µ—â–µ–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–ª–∞–Ω —Å "/" ');
  }

  const resp = await db.clan.findName(trimName);
  if (resp) {
    throw new Error('–ö—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª —ç—Ç–æ –¥–æ —Ç–µ–±—è!');
  } else {
    return trimName;
  }
}

createClanScene.enter(async ({ reply, session }) => {
  reply(
    `–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞: 100üí∞.
${session.character.clan ? '–°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∏–Ω—É—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω' : '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞'}`,
    Markup.inlineKeyboard([
      Markup.callbackButton('–ù–∞–∑–∞–¥', 'back'),
    ]).resize().extra(),
  );
});

createClanScene.hears('üîô –í –ª–æ–±–±–∏', ({ scene }) => {
  scene.enter('lobby');
});

createClanScene.on('text', async ({
  message, session, reply, scene,
}) => {
  try {
    const clanName = await valid(message.text);
    const char = await session.character.createClan(clanName);
    session.character = char;
    scene.enter('clan');
  } catch (e) {
    await reply(e.message);
  }
});

createClanScene.action('back', ({ scene }) => {
  scene.enter('clan');
});

module.exports = createClanScene;
