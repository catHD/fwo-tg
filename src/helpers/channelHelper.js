const Markup = require('telegraf/markup');
const { skills } = require('../arena/SkillService');
const arena = require('../arena');
/**
 * –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—â–∏–π —á–∞—Ç
 * @typedef {import ('../arena/PlayerService')} Player
 * @typedef {import ('../arena/GameService')} Game
 */

const chatId = process.env.BOT_CHATID || -1001483444452;

module.exports = {
  bot: null,
  messages: {},
  statusMessages: {},
  /**
   * @param {string} data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Number|String} [id=chatId] - id —á–∞—Ç–∞
   */
  async broadcast(data, id = chatId) {
    await this.bot.telegram.sendMessage(id, data, { parse_mode: 'Markdown' });
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞–º
   * @param {string} data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} id - id —á–∞—Ç–∞
   */
  async sendStatus(data, id) {
    if (!this.statusMessages[id]) {
      const message = await this.bot.telegram.sendMessage(id, data, { parse_mode: 'Markdown' });
      this.statusMessages[id] = message.message_id;
    } else {
      this.updateStatus(data, id);
    }
  },
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã —É –∏–≥—Ä–æ–∫–æ–≤
   * @param {string} data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {number} id - id —á–∞—Ç–∞
   */
  async updateStatus(data, id) {
    await this.bot.telegram.editMessageText(
      id,
      this.statusMessages[id],
      '',
      data,
      { parse_mode: 'Markdown' },
    );
  },
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–∞. –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ + –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏–∏
   * @param {Player} player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
   */
  getOrderButtons(player) {
    const buttons = [
      [Markup.callbackButton('–ê—Ç–∞–∫–∞', 'action_attack')],
      [Markup.callbackButton('–õ–µ—á–µ–Ω–∏–µ', 'action_handsHeal')],
      [Markup.callbackButton('–ó–∞—â–∏—Ç–∞', 'action_protect')],
      [Markup.callbackButton('–†–µ–≥–µ–Ω', 'action_regen')],
    ];

    Object.keys(player.magics)
      .forEach((m) => {
        buttons.push([Markup.callbackButton(arena.magics[m].displayName, `action_${m}`)]);
      });

    const gameId = arena.characters[player.id].mm;
    /** @type {Game} */
    const Game = arena.games[gameId];

    Object.keys(player.skills)
      .filter((s) => skills[s].proc <= player.proc && !Game.orders.checkPlayerOrder(player.id, s))
      .forEach((s) => {
        buttons.push([Markup.callbackButton(`${skills[s].displayName} (${skills[s].proc}%)`, `action_${s}`)]);
      });
    return buttons;
  },
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞
   * @param {Player} player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
   */
  async sendOrderButtons(player) {
    const message = await this.bot.telegram.sendMessage(
      player.tgId,
      '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
      Markup.inlineKeyboard(this.getOrderButtons(player)).resize().extra(),
    );
    this.messages[message.chat.id] = message.message_id;
  },

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
   * @param {Player} player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
   */
  async removeMessages(player) {
    await this.bot.telegram.deleteMessage(
      player.tgId,
      this.messages[player.tgId],
    );
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –ª–æ–±–±–∏
   * @param {Player} player
   */
  async sendExitButton(player) {
    const { exp, gold } = player.stats.collect;
    await this.bot.telegram.sendMessage(
      player.tgId,
      `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–æ–π:
üìñ ${exp}
üí∞ ${gold}`,
      Markup.inlineKeyboard([Markup.callbackButton('–í—ã—Ö–æ–¥ –≤ –ª–æ–±–±–∏', 'exit')]).resize().extra(),
    );
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–±–µ–∂–∞–≤—à–µ–≥–æ –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –ª–æ–±–±–∏
   * @param {Player} player
   */
  async sendRunButton(player) {
    await this.bot.telegram.sendMessage(
      player.tgId,
      '–¢—ã –±–µ–∂–∞–ª –∏–∑ –±–æ—è',
      Markup.inlineKeyboard([Markup.callbackButton('–í—ã—Ö–æ–¥ –≤ –ª–æ–±–±–∏', 'exit')]).resize().extra(),
    );
  },
};
