import { Markup } from 'telegraf';
import arena from '../arena';
import type Player from '../arena/PlayerService';
import { Profs } from '../data';
import BattleKeyboard from './BattleKeyboard';

const chatId = process.env.BOT_CHATID || -1001483444452;

const messages: Record<number, number> = {};
const statusMessages: Record<number, number> = {};

export function setMessage(key: number, data: number): void {
  messages[key] = data;
}
/**
 * @param data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param id - id —á–∞—Ç–∞
 */
export async function broadcast(data: string, id: number | string = chatId): Promise<void> {
  try {
  await arena.bot.telegram.sendMessage(id, data, { parse_mode: 'Markdown' });
  } catch (e) {
    console.log(`error: broadcast: ${e.message} for ${id}`);
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã —É –∏–≥—Ä–æ–∫–æ–≤
 * @param data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param id - id —á–∞—Ç–∞
 */
export async function updateStatus(data: string, id: number): Promise<void> {
  await arena.bot.telegram.editMessageText(
    id,
    statusMessages[id],
    '',
    data,
    { parse_mode: 'Markdown' },
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∞–º
 * @param data - —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param id - id —á–∞—Ç–∞
 */
export async function sendStatus(data: string, id: number): Promise<void> {
  try {
    if (!statusMessages[id]) {
      const message = await arena.bot.telegram.sendMessage(id, data, { parse_mode: 'Markdown' });
      statusMessages[id] = message.message_id;
    } else {
      updateStatus(data, id);
    }
  } catch (e) {
    console.log(`error: sendOrderButtons: ${e.message} for ${id}`);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–∞. –ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ + –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∏–∏
 * @param player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
 */
export function getOrderButtons(player: Player): ReturnType<BattleKeyboard['render']> {
  return new BattleKeyboard(player)
    .setActions()
    .setMagics()
    .setSkills()
    .render();
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞
 * @param player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
 */
export async function sendOrderButtons(player: Player): Promise<void> {
  try {
    const message = await arena.bot.telegram.sendMessage(
      player.tgId,
      '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
      Markup.inlineKeyboard(getOrderButtons(player)),
    );
    messages[message.chat.id] = message.message_id;
  } catch (e) {
    console.log(`error: sendOrderButtons: ${e.message} for ${player.id}`);
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
 * @param player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
 */
export async function removeMessages(player: Player): Promise<void> {
  try {
    await arena.bot.telegram.deleteMessage(
      player.tgId,
      messages[player.tgId],
    );
  } catch (e) {
    console.log(`error: removeMessages: ${e.message} for ${player.id}`);
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–≥—Ä—ã
 * @param player - –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞
 */
export async function removeStatusMessages(player: Player): Promise<void> {
  try {
    await arena.bot.telegram.deleteMessage(
      player.tgId,
      statusMessages[player.tgId],
    );
    delete statusMessages[player.tgId];
  } catch (e) {
    console.log(`error: removeStatusMessages: ${e.message} for ${player.id}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –ª–æ–±–±–∏
 * @param player
 */
export async function sendExitButton(player: Player): Promise<void> {
  try {
    await removeStatusMessages(player);

    const { exp, gold } = player.stats.collect;
    const character = arena.characters[player.id];
    const {
      autoreg, nickname, lvl, prof, clan, expLimitToday, expEarnedToday,
    } = character;

    let expMessage = `${exp}`;
    if (expEarnedToday >= expLimitToday) {
      expMessage += ' (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ–ø—ã—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è)';
    } else {
      expMessage += ` (–¥–æ—Å—Ç—É–ø–Ω–æ –µ—â—ë üìñ ${expLimitToday - expEarnedToday} —Å–µ–≥–æ–¥–Ω—è)`;
    }

    const message = await arena.bot.telegram.sendMessage(
      player.tgId,
      `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–æ–π:
  üìñ ${expMessage} (${character.exp}/${character.nextLvlExp})
  üí∞ ${gold} (${character.gold})
  ${autoreg ? '–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã...' : ''}`,
      Markup.inlineKeyboard([
        Markup.button.callback('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', 'stop', !autoreg),
        Markup.button.callback('–í—ã—Ö–æ–¥ –≤ –ª–æ–±–±–∏', 'exit', autoreg),
      ]),
    );

    if (autoreg) {
      messages[message.chat.id] = message.message_id;
      broadcast(
        `–ò–≥—Ä–æ–∫ ${clan ? `\\[${clan.name}]` : ''} *${nickname}* (${Profs.profsData[prof].icon}${lvl}) –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –∏–≥—Ä—ã`,
      );
    }
  } catch (e) {
    console.log(`error: sendExitButton: ${e.message} for ${player.id}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–±–µ–∂–∞–≤—à–µ–≥–æ –∏ –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ –ª–æ–±–±–∏
 * @param player
 */
export async function sendRunButton(player: Player): Promise<void> {
  try {
  await removeStatusMessages(player);

  await arena.bot.telegram.sendMessage(
    player.tgId,
    '–¢—ã –±–µ–∂–∞–ª –∏–∑ –±–æ—è',
    Markup.inlineKeyboard([Markup.button.callback('–í—ã—Ö–æ–¥ –≤ –ª–æ–±–±–∏', 'exit')]),
  );
  } catch (e) {
    console.log(`error: sendRunButton: ${e.message} for ${player.id}`);
  }
}
